package com.johnyeager.rtrading.rolimonsmonitor.services;

import com.johnyeager.rtrading.rolimonsmonitor.model.DiscordNotifier;
import com.johnyeager.rtrading.rolimonsmonitor.model.FiltrosAnuncio;
import org.openqa.selenium.WebElement;

import java.util.Set;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class AnuncioProcessor {

    public void processarAnuncio(WebElement anuncio, FiltrosAnuncio filtros, Set<String> anunciados) {
        // Extrair informa√ß√µes do an√∫ncio
        AnuncioInfo info = extrairInformacoesAnuncio(anuncio);

        if (info == null) {
            return;
        }

        System.out.println("An√∫ncio de " + info.getDonoNome() + " - Value: " + info.getValue() + ", RAP: " + info.getRap());

        // Filtra pelo Value
        if (info.getValue() == -1 || info.getValue() < filtros.getMinValue() || info.getValue() > filtros.getMaxValue()) {
            System.out.println("An√∫ncio fora do range de value: " + info.getValue());
            return;
        }

        // Filtra pelas tags
        if (!verificarTags(anuncio, filtros)) {
            System.out.println("An√∫ncio n√£o atende √†s tags requeridas");
            return;
        }

        // Evita repetir an√∫ncios
        String keyValue = info.getDonoNome() + "-" + info.getValue() + "-" + System.currentTimeMillis() / 60000;
        if (!anunciados.contains(keyValue)) {
            enviarParaDiscord(info);
            anunciados.add(keyValue);
            System.out.println("‚úÖ An√∫ncio enviado para Discord: " + info.getDonoNome());
        }
    }

    private AnuncioInfo extrairInformacoesAnuncio(WebElement anuncio) {
        try {
            AnuncioInfo info = new AnuncioInfo();

            // Nome do dono + link para perfil
            WebElement ownerEl = anuncio.findElement(By.cssSelector("a.ad_creator_name, a[href*='player'], .user-name"));
            info.setDonoNome(ownerEl.getText().trim());

            String donoLink = ownerEl.getAttribute("href");
            if (donoLink != null && !donoLink.startsWith("http")) {
                donoLink = "https://www.rolimons.com" + donoLink;
            }
            info.setDonoLink(donoLink);

            // Itens Offering
            List<WebElement> itemsOffering = anuncio.findElements(By.cssSelector(".ad_side_left img.ad_item_img, .items-container img"));
            StringBuilder itemsTxt = new StringBuilder();
            int maxItems = Math.min(itemsOffering.size(), 4);
            for (int i = 0; i < maxItems; i++) {
                String tooltip = itemsOffering.get(i).getAttribute("data-original-title");
                if (tooltip != null && !tooltip.isEmpty()) {
                    itemsTxt.append("- ").append(tooltip.replace("<br>", " | ")).append("\n");
                }
            }
            info.setItems(itemsTxt.toString());

            // Extrair valores
            info.setValue(extrairValor(anuncio, "value"));
            info.setRap(extrairValor(anuncio, "rap"));

            return info;

        } catch (Exception e) {
            System.out.println("Erro ao extrair informa√ß√µes do an√∫ncio: " + e.getMessage());
            return null;
        }
    }

    private int extrairValor(WebElement anuncio, String tipo) {
        try {
            // Tenta encontrar por seletores CSS
            String seletor = tipo.equals("value") ? ".stat_value, .value, [class*='value']" : ".stat_rap, .rap, [class*='rap']";
            List<WebElement> elements = anuncio.findElements(By.cssSelector(seletor));

            if (!elements.isEmpty()) {
                String text = elements.get(0).getText().trim();
                return parseNumericValue(text);
            }

            // Se n√£o encontrou, tenta extrair do texto
            String anuncioText = anuncio.getText();
            return extractValueFromText(anuncioText, tipo);

        } catch (Exception e) {
            System.out.println("Erro ao extrair " + tipo + ": " + e.getMessage());
            return -1;
        }
    }

    private boolean verificarTags(WebElement anuncio, FiltrosAnuncio filtros) {
        String anuncioTextLower = anuncio.getText().toLowerCase();

        for (Map.Entry<String, Boolean> entry : filtros.getTodasTags().entrySet()) {
            String tag = entry.getKey();
            Boolean estado = entry.getValue();
            if (estado == null) continue;

            boolean contem = anuncioTextLower.contains(tag.toLowerCase());
            if (estado && !contem) {
                return false;
            } else if (!estado && contem) {
                return false;
            }
        }
        return true;
    }

    private void enviarParaDiscord(AnuncioInfo info) {
        String embed = "{\n" +
                "  \"embeds\": [{\n" +
                "    \"title\": \"üéâ Novo An√∫ncio Atendido!\",\n" +
                "    \"description\": \"**Dono:** [" + info.getDonoNome() + "](" + info.getDonoLink() + ")\\n" +
                "**Value:** " + (info.getValue() != -1 ? info.getValue() : "N/A") + "\\n" +
                "**RAP:** " + (info.getRap() != -1 ? info.getRap() : "N/A") + "\",\n" +
                "    \"fields\": [\n" +
                "      {\"name\": \"Itens Offering\", \"value\": \"" +
                (info.getItems().length() > 0 ? info.getItems().replace("\n", "\\n").replace("\"", "\\\"") : "Nenhum item listado") + "\"}\n" +
                "    ],\n" +
                "    \"url\": \"https://www.rolimons.com/trades\"\n" +
                "  }]\n" +
                "}";

        DiscordNotifier.sendMessage(embed);
    }

    private int parseNumericValue(String text) {
        if (text == null || text.trim().isEmpty() || text.equals("-")) {
            return -1;
        }

        try {
            String numericOnly = text.replaceAll("[^\\d]", "");
            if (numericOnly.isEmpty()) {
                return -1;
            }
            return Integer.parseInt(numericOnly);
        } catch (NumberFormatException e) {
            System.out.println("N√£o foi poss√≠vel converter o valor: '" + text + "'");
            return -1;
        }
    }

    private int extractValueFromText(String text, String type) {
        Pattern pattern = Pattern.compile("(?i)" + type + "[\\s:]*([\\d,.-]+)");
        Matcher matcher = pattern.matcher(text);

        if (matcher.find()) {
            return parseNumericValue(matcher.group(1));
        }
        return -1;
    }
}